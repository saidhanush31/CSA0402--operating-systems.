#include<stdio.h>

void implimentWorstFit(int blockSize[], int blocks, int processSize[], int proccesses)
{
    
    int allocation[proccesses];
    int occupied[blocks];
    
  
    for(int i = 0; i < proccesses; i++){
        allocation[i] = -1;
    }
    
    for(int i = 0; i < blocks; i++){
        occupied[i] = 0;
    }
 
  
    for (int i=0; i<proccesses; i++)
    {
        
        int indexPlaced = -1;
        for (int j=0; j<blocks; j++)        {             if (blockSize[j] >= processSize[i] && !occupied[j])
            {
            
                if (indexPlaced == -1)
                    indexPlaced = j;
                    
                
                else if (blockSize[indexPlaced] < blockSize[j])
                    indexPlaced = j;
            }
        }
 
       
        if (indexPlaced != -1)
        {
        
            allocation[i] = indexPlaced;
            
            
            occupied[indexPlaced] = 1;
 
          
            blockSize[indexPlaced] -= processSize[i];
        }
    }
 
    printf("\nProcess No.\tProcess Size\tBlock no.\n");
    for (int i = 0; i < proccesses; i++)
    {
        printf("%d \t\t\t %d \t\t\t", i+1, processSize[i]);
        if (allocation[i] != -1)
            printf("%d\n",allocation[i] + 1);
        else
            printf("Not Allocated\n");
    }
}
 
// Driver code
int main()
{
    int blockSize[] = {5, 4, 3, 6, 7};
    int processSize[] = {1, 3, 5, 3};
    int blocks = sizeof(blockSize)/sizeof(blockSize[0]);
    int proccesses = sizeof(processSize)/sizeof(processSize[0]);
 
    implimentWorstFit(blockSize, blocks, processSize, proccesses);
 
    return 0 ;
}
